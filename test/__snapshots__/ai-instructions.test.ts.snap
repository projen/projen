// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AiInstructions snapshots - custom agents and instructions 1`] = `
{
  ".cursor/rules/project.md": "# Projen-managed Project Instructions

This project is managed by [projen](https://github.com/projen/projen), a project configuration management tool.

## Important Guidelines

### Task Execution

- **Always use projen for task execution**: Run tasks using \`bunx projen <task-name>\` instead of directly using npm, yarn, or other package managers.
- **Check available tasks**: Look in \`.projen/tasks.json\` to see all available tasks, their descriptions, and steps.
- **Common tasks**:
  - \`bunx projen\` - Synthesize project configuration files
  - \`bunx projen build\` - Builds the project, including running test
  - \`bunx projen test\` - Runs tests only
  - \`bunx projen compile\` - Compiles the source code only

### File Modifications

- **DO NOT manually edit generated files**: Files marked with a comment like "~~ Generated by projen. To modify..." should never be edited directly.
- **Modify configuration in .projenrc**: To change project configuration, always edit the \`.projenrc.ts\`, \`.projenrc.py\` or \`.projenrc.json\` etc. file and then run \`bunx projen\` to regenerate the project files.
- **Check .projenrc first**: Before suggesting changes to package.json, tsconfig.json, or other configuration files, always check if these are managed by projen and suggest changes to .projenrc instead.

### Dependencies

- **Add dependencies through projen**: Use the projen configuration to add dependencies instead of manually editing package.json or using npm/yarn install directly.
- **Example**: In .projenrc, use methods like \`addDeps()\`, \`addDevDeps()\`, or \`addPeerDeps()\` to add dependencies.

### Workflow

1. Make changes to .projenrc configuration file
2. Run \`bunx projen\` to synthesize and update generated files
3. Review the changes
4. Commit both .projenrc and the generated files

## Projen Configuration

This project's configuration is defined in the .projenrc file at the root of the repository. All project metadata, dependencies, scripts, and tooling configuration should be managed through this file.

## Additional Resources

- [Projen Documentation](https://projen.io)
- [Projen GitHub Repository](https://github.com/projen/projen)

# Development Best Practices

- **Always run build after changes**: After modifying any source or test file, run \`bunx projen build\` to ensure your changes compile and pass all tests.
- **Task completion criteria**: A task is not considered complete until:
  - All tests pass (\`bunx projen test\`)
  - There are no compilation errors (\`bunx projen compile\`)
  - There are no linting errors (usually part of the build, if not, run the linter defined in tasks.json)
  - The full build succeeds (\`bunx projen build\`)

Use TypeScript strict mode.

Always write tests.

Follow the project's coding standards.
",
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "bunx projen".

* text=auto eol=lf
/.cursor/rules/project.md linguist-generated
/.gitattributes linguist-generated
/.github/copilot-instructions.md linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated",
  ".github/copilot-instructions.md": "# Projen-managed Project Instructions

This project is managed by [projen](https://github.com/projen/projen), a project configuration management tool.

## Important Guidelines

### Task Execution

- **Always use projen for task execution**: Run tasks using \`bunx projen <task-name>\` instead of directly using npm, yarn, or other package managers.
- **Check available tasks**: Look in \`.projen/tasks.json\` to see all available tasks, their descriptions, and steps.
- **Common tasks**:
  - \`bunx projen\` - Synthesize project configuration files
  - \`bunx projen build\` - Builds the project, including running test
  - \`bunx projen test\` - Runs tests only
  - \`bunx projen compile\` - Compiles the source code only

### File Modifications

- **DO NOT manually edit generated files**: Files marked with a comment like "~~ Generated by projen. To modify..." should never be edited directly.
- **Modify configuration in .projenrc**: To change project configuration, always edit the \`.projenrc.ts\`, \`.projenrc.py\` or \`.projenrc.json\` etc. file and then run \`bunx projen\` to regenerate the project files.
- **Check .projenrc first**: Before suggesting changes to package.json, tsconfig.json, or other configuration files, always check if these are managed by projen and suggest changes to .projenrc instead.

### Dependencies

- **Add dependencies through projen**: Use the projen configuration to add dependencies instead of manually editing package.json or using npm/yarn install directly.
- **Example**: In .projenrc, use methods like \`addDeps()\`, \`addDevDeps()\`, or \`addPeerDeps()\` to add dependencies.

### Workflow

1. Make changes to .projenrc configuration file
2. Run \`bunx projen\` to synthesize and update generated files
3. Review the changes
4. Commit both .projenrc and the generated files

## Projen Configuration

This project's configuration is defined in the .projenrc file at the root of the repository. All project metadata, dependencies, scripts, and tooling configuration should be managed through this file.

## Additional Resources

- [Projen Documentation](https://projen.io)
- [Projen GitHub Repository](https://github.com/projen/projen)

# Development Best Practices

- **Always run build after changes**: After modifying any source or test file, run \`bunx projen build\` to ensure your changes compile and pass all tests.
- **Task completion criteria**: A task is not considered complete until:
  - All tests pass (\`bunx projen test\`)
  - There are no compilation errors (\`bunx projen compile\`)
  - There are no linting errors (usually part of the build, if not, run the linter defined in tasks.json)
  - The full build succeeds (\`bunx projen build\`)

Follow the project's coding standards.
",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "bunx projen".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
  merge_group: {}
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    steps:
      - uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "bunx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/.github/copilot-instructions.md
!/.cursor/rules/project.md
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "bunx projen".",
    "files": [
      ".cursor/rules/project.md",
      ".gitattributes",
      ".github/copilot-instructions.md",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "bunx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# replace this",
}
`;

exports[`AiInstructions snapshots - default configuration 1`] = `
{
  ".amazonq/rules/project.md": "# Projen-managed Project Instructions

This project is managed by [projen](https://github.com/projen/projen), a project configuration management tool.

## Important Guidelines

### Task Execution

- **Always use projen for task execution**: Run tasks using \`npx projen <task-name>\` instead of directly using npm, yarn, or other package managers.
- **Check available tasks**: Look in \`.projen/tasks.json\` to see all available tasks, their descriptions, and steps.
- **Common tasks**:
  - \`npx projen\` - Synthesize project configuration files
  - \`npx projen build\` - Builds the project, including running test
  - \`npx projen test\` - Runs tests only
  - \`npx projen compile\` - Compiles the source code only

### File Modifications

- **DO NOT manually edit generated files**: Files marked with a comment like "~~ Generated by projen. To modify..." should never be edited directly.
- **Modify configuration in .projenrc**: To change project configuration, always edit the \`.projenrc.ts\`, \`.projenrc.py\` or \`.projenrc.json\` etc. file and then run \`npx projen\` to regenerate the project files.
- **Check .projenrc first**: Before suggesting changes to package.json, tsconfig.json, or other configuration files, always check if these are managed by projen and suggest changes to .projenrc instead.

### Dependencies

- **Add dependencies through projen**: Use the projen configuration to add dependencies instead of manually editing package.json or using npm/yarn install directly.
- **Example**: In .projenrc, use methods like \`addDeps()\`, \`addDevDeps()\`, or \`addPeerDeps()\` to add dependencies.

### Workflow

1. Make changes to .projenrc configuration file
2. Run \`npx projen\` to synthesize and update generated files
3. Review the changes
4. Commit both .projenrc and the generated files

## Projen Configuration

This project's configuration is defined in the .projenrc file at the root of the repository. All project metadata, dependencies, scripts, and tooling configuration should be managed through this file.

## Additional Resources

- [Projen Documentation](https://projen.io)
- [Projen GitHub Repository](https://github.com/projen/projen)

# Development Best Practices

- **Always run build after changes**: After modifying any source or test file, run \`npx projen build\` to ensure your changes compile and pass all tests.
- **Task completion criteria**: A task is not considered complete until:
  - All tests pass (\`npx projen test\`)
  - There are no compilation errors (\`npx projen compile\`)
  - There are no linting errors (usually part of the build, if not, run the linter defined in tasks.json)
  - The full build succeeds (\`npx projen build\`)
",
  ".cursor/rules/project.md": "# Projen-managed Project Instructions

This project is managed by [projen](https://github.com/projen/projen), a project configuration management tool.

## Important Guidelines

### Task Execution

- **Always use projen for task execution**: Run tasks using \`npx projen <task-name>\` instead of directly using npm, yarn, or other package managers.
- **Check available tasks**: Look in \`.projen/tasks.json\` to see all available tasks, their descriptions, and steps.
- **Common tasks**:
  - \`npx projen\` - Synthesize project configuration files
  - \`npx projen build\` - Builds the project, including running test
  - \`npx projen test\` - Runs tests only
  - \`npx projen compile\` - Compiles the source code only

### File Modifications

- **DO NOT manually edit generated files**: Files marked with a comment like "~~ Generated by projen. To modify..." should never be edited directly.
- **Modify configuration in .projenrc**: To change project configuration, always edit the \`.projenrc.ts\`, \`.projenrc.py\` or \`.projenrc.json\` etc. file and then run \`npx projen\` to regenerate the project files.
- **Check .projenrc first**: Before suggesting changes to package.json, tsconfig.json, or other configuration files, always check if these are managed by projen and suggest changes to .projenrc instead.

### Dependencies

- **Add dependencies through projen**: Use the projen configuration to add dependencies instead of manually editing package.json or using npm/yarn install directly.
- **Example**: In .projenrc, use methods like \`addDeps()\`, \`addDevDeps()\`, or \`addPeerDeps()\` to add dependencies.

### Workflow

1. Make changes to .projenrc configuration file
2. Run \`npx projen\` to synthesize and update generated files
3. Review the changes
4. Commit both .projenrc and the generated files

## Projen Configuration

This project's configuration is defined in the .projenrc file at the root of the repository. All project metadata, dependencies, scripts, and tooling configuration should be managed through this file.

## Additional Resources

- [Projen Documentation](https://projen.io)
- [Projen GitHub Repository](https://github.com/projen/projen)

# Development Best Practices

- **Always run build after changes**: After modifying any source or test file, run \`npx projen build\` to ensure your changes compile and pass all tests.
- **Task completion criteria**: A task is not considered complete until:
  - All tests pass (\`npx projen test\`)
  - There are no compilation errors (\`npx projen compile\`)
  - There are no linting errors (usually part of the build, if not, run the linter defined in tasks.json)
  - The full build succeeds (\`npx projen build\`)
",
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

* text=auto eol=lf
/.amazonq/rules/project.md linguist-generated
/.cursor/rules/project.md linguist-generated
/.gitattributes linguist-generated
/.github/copilot-instructions.md linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.kiro/steering/project.md linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/CLAUDE.md linguist-generated",
  ".github/copilot-instructions.md": "# Projen-managed Project Instructions

This project is managed by [projen](https://github.com/projen/projen), a project configuration management tool.

## Important Guidelines

### Task Execution

- **Always use projen for task execution**: Run tasks using \`npx projen <task-name>\` instead of directly using npm, yarn, or other package managers.
- **Check available tasks**: Look in \`.projen/tasks.json\` to see all available tasks, their descriptions, and steps.
- **Common tasks**:
  - \`npx projen\` - Synthesize project configuration files
  - \`npx projen build\` - Builds the project, including running test
  - \`npx projen test\` - Runs tests only
  - \`npx projen compile\` - Compiles the source code only

### File Modifications

- **DO NOT manually edit generated files**: Files marked with a comment like "~~ Generated by projen. To modify..." should never be edited directly.
- **Modify configuration in .projenrc**: To change project configuration, always edit the \`.projenrc.ts\`, \`.projenrc.py\` or \`.projenrc.json\` etc. file and then run \`npx projen\` to regenerate the project files.
- **Check .projenrc first**: Before suggesting changes to package.json, tsconfig.json, or other configuration files, always check if these are managed by projen and suggest changes to .projenrc instead.

### Dependencies

- **Add dependencies through projen**: Use the projen configuration to add dependencies instead of manually editing package.json or using npm/yarn install directly.
- **Example**: In .projenrc, use methods like \`addDeps()\`, \`addDevDeps()\`, or \`addPeerDeps()\` to add dependencies.

### Workflow

1. Make changes to .projenrc configuration file
2. Run \`npx projen\` to synthesize and update generated files
3. Review the changes
4. Commit both .projenrc and the generated files

## Projen Configuration

This project's configuration is defined in the .projenrc file at the root of the repository. All project metadata, dependencies, scripts, and tooling configuration should be managed through this file.

## Additional Resources

- [Projen Documentation](https://projen.io)
- [Projen GitHub Repository](https://github.com/projen/projen)

# Development Best Practices

- **Always run build after changes**: After modifying any source or test file, run \`npx projen build\` to ensure your changes compile and pass all tests.
- **Task completion criteria**: A task is not considered complete until:
  - All tests pass (\`npx projen test\`)
  - There are no compilation errors (\`npx projen compile\`)
  - There are no linting errors (usually part of the build, if not, run the linter defined in tasks.json)
  - The full build succeeds (\`npx projen build\`)
",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
  merge_group: {}
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    steps:
      - uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/.github/copilot-instructions.md
!/.cursor/rules/project.md
!/CLAUDE.md
!/.amazonq/rules/project.md
!/.kiro/steering/project.md
",
  ".kiro/steering/project.md": "# Projen-managed Project Instructions

This project is managed by [projen](https://github.com/projen/projen), a project configuration management tool.

## Important Guidelines

### Task Execution

- **Always use projen for task execution**: Run tasks using \`npx projen <task-name>\` instead of directly using npm, yarn, or other package managers.
- **Check available tasks**: Look in \`.projen/tasks.json\` to see all available tasks, their descriptions, and steps.
- **Common tasks**:
  - \`npx projen\` - Synthesize project configuration files
  - \`npx projen build\` - Builds the project, including running test
  - \`npx projen test\` - Runs tests only
  - \`npx projen compile\` - Compiles the source code only

### File Modifications

- **DO NOT manually edit generated files**: Files marked with a comment like "~~ Generated by projen. To modify..." should never be edited directly.
- **Modify configuration in .projenrc**: To change project configuration, always edit the \`.projenrc.ts\`, \`.projenrc.py\` or \`.projenrc.json\` etc. file and then run \`npx projen\` to regenerate the project files.
- **Check .projenrc first**: Before suggesting changes to package.json, tsconfig.json, or other configuration files, always check if these are managed by projen and suggest changes to .projenrc instead.

### Dependencies

- **Add dependencies through projen**: Use the projen configuration to add dependencies instead of manually editing package.json or using npm/yarn install directly.
- **Example**: In .projenrc, use methods like \`addDeps()\`, \`addDevDeps()\`, or \`addPeerDeps()\` to add dependencies.

### Workflow

1. Make changes to .projenrc configuration file
2. Run \`npx projen\` to synthesize and update generated files
3. Review the changes
4. Commit both .projenrc and the generated files

## Projen Configuration

This project's configuration is defined in the .projenrc file at the root of the repository. All project metadata, dependencies, scripts, and tooling configuration should be managed through this file.

## Additional Resources

- [Projen Documentation](https://projen.io)
- [Projen GitHub Repository](https://github.com/projen/projen)

# Development Best Practices

- **Always run build after changes**: After modifying any source or test file, run \`npx projen build\` to ensure your changes compile and pass all tests.
- **Task completion criteria**: A task is not considered complete until:
  - All tests pass (\`npx projen test\`)
  - There are no compilation errors (\`npx projen compile\`)
  - There are no linting errors (usually part of the build, if not, run the linter defined in tasks.json)
  - The full build succeeds (\`npx projen build\`)
",
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".amazonq/rules/project.md",
      ".cursor/rules/project.md",
      ".gitattributes",
      ".github/copilot-instructions.md",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".kiro/steering/project.md",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "CLAUDE.md",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "CLAUDE.md": "# Projen-managed Project Instructions

This project is managed by [projen](https://github.com/projen/projen), a project configuration management tool.

## Important Guidelines

### Task Execution

- **Always use projen for task execution**: Run tasks using \`npx projen <task-name>\` instead of directly using npm, yarn, or other package managers.
- **Check available tasks**: Look in \`.projen/tasks.json\` to see all available tasks, their descriptions, and steps.
- **Common tasks**:
  - \`npx projen\` - Synthesize project configuration files
  - \`npx projen build\` - Builds the project, including running test
  - \`npx projen test\` - Runs tests only
  - \`npx projen compile\` - Compiles the source code only

### File Modifications

- **DO NOT manually edit generated files**: Files marked with a comment like "~~ Generated by projen. To modify..." should never be edited directly.
- **Modify configuration in .projenrc**: To change project configuration, always edit the \`.projenrc.ts\`, \`.projenrc.py\` or \`.projenrc.json\` etc. file and then run \`npx projen\` to regenerate the project files.
- **Check .projenrc first**: Before suggesting changes to package.json, tsconfig.json, or other configuration files, always check if these are managed by projen and suggest changes to .projenrc instead.

### Dependencies

- **Add dependencies through projen**: Use the projen configuration to add dependencies instead of manually editing package.json or using npm/yarn install directly.
- **Example**: In .projenrc, use methods like \`addDeps()\`, \`addDevDeps()\`, or \`addPeerDeps()\` to add dependencies.

### Workflow

1. Make changes to .projenrc configuration file
2. Run \`npx projen\` to synthesize and update generated files
3. Review the changes
4. Commit both .projenrc and the generated files

## Projen Configuration

This project's configuration is defined in the .projenrc file at the root of the repository. All project metadata, dependencies, scripts, and tooling configuration should be managed through this file.

## Additional Resources

- [Projen Documentation](https://projen.io)
- [Projen GitHub Repository](https://github.com/projen/projen)

# Development Best Practices

- **Always run build after changes**: After modifying any source or test file, run \`npx projen build\` to ensure your changes compile and pass all tests.
- **Task completion criteria**: A task is not considered complete until:
  - All tests pass (\`npx projen test\`)
  - There are no compilation errors (\`npx projen compile\`)
  - There are no linting errors (usually part of the build, if not, run the linter defined in tasks.json)
  - The full build succeeds (\`npx projen build\`)
",
  "README.md": "# replace this",
}
`;
