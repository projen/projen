import { ESLintConfig } from "../../../src/javascript/eslint/config";
import { ESLintConfigFile } from "../../../src/javascript/eslint/config-file";
import { Extends } from "../../../src/javascript/eslint/config-object";
import { ESLintJs, Tseslint } from "../../../src/javascript/eslint/presets";
import { ModuleType } from "../../../src/javascript/module-type";
import { Project } from "../../../src/project";
import { synthSnapshot } from "../../util";

describe("ESLintConfigFile", () => {
  let project: Project;

  beforeEach(() => {
    project = new Project({
      name: "test-project",
    });
  });

  test("creates ESM config file by default", () => {
    const configFile = new ESLintConfigFile(project, {});

    expect(configFile.path).toBe("eslint.config.mjs");
  });

  test("creates CommonJS config file when specified", () => {
    const configFile = new ESLintConfigFile(project, {
      moduleType: ModuleType.COMMON_JS,
    });

    expect(configFile.path).toBe("eslint.config.cjs");
  });

  test("generates basic ESM config", () => {
    new ESLintConfigFile(project, {});

    const output = synthSnapshot(project);
    const content = output["eslint.config.mjs"];

    expect(content).toContain('import { defineConfig } from "eslint/config";');
    expect(content).toContain("export default defineConfig(");
    expect(content).toContain(");");
  });

  test("generates basic CommonJS config", () => {
    new ESLintConfigFile(project, {
      moduleType: ModuleType.COMMON_JS,
    });

    const output = synthSnapshot(project);
    const content = output["eslint.config.cjs"];

    expect(content).toContain(
      'const { defineConfig } = require("eslint/config");'
    );
    expect(content).toContain("module.exports = defineConfig(");
    expect(content).toContain(");");
  });

  test("adds configs to file", () => {
    new ESLintConfigFile(project, {
      configs: [ESLintJs.RECOMMENDED],
    });

    const output = synthSnapshot(project);
    const content = output["eslint.config.mjs"];

    expect(content).toContain("js.configs.recommended");
  });

  test("addConfig method works", () => {
    const configFile = new ESLintConfigFile(project, {});
    configFile.addConfig(ESLintJs.RECOMMENDED);

    const output = synthSnapshot(project);
    const content = output["eslint.config.mjs"];

    expect(content).toContain("js.configs.recommended");
  });

  test("handles multiple configs", () => {
    new ESLintConfigFile(project, {
      configs: [ESLintJs.RECOMMENDED, Tseslint.RECOMMENDED],
    });

    const output = synthSnapshot(project);
    const content = output["eslint.config.mjs"];

    expect(content).toContain("eslint.configs.recommended");
    expect(content).toContain("tseslint.configs.recommended");
  });

  test("handles config object", () => {
    const config = new ESLintConfigFile(project);
    config.addConfig(
      new ESLintConfig({
        extends: [Extends.fromName("additionalConfig")],
      })
    );

    const output = synthSnapshot(project);
    const content = output["eslint.config.mjs"];

    expect(content).toMatchInlineSnapshot(`
      "// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
      import { defineConfig } from "eslint/config";

      export default defineConfig(
        {
          "extends": [
            "additionalConfig"
          ]
        }
      );
      "
    `);
  });
});
