// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`poetry correctly handles dependencies with toml inline tables should match the snapshot for the pyproject.toml file 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

[tool.poetry]
name = "test-python-project"
version = "0.1.0"
description = "a short project description"
license = "Apache-2.0"
authors = [ "First Last <email@example.com>" ]
homepage = "http://www.example.com"
classifiers = [ "Development Status :: 4 - Beta" ]
readme = "README.md"

  [tool.poetry.dependencies]
  python = "^3.8"

    [tool.poetry.dependencies.package1]
    git = "https://github.com/numpy/numpy.git"
    tag = "v0.13.2"

    [tool.poetry.dependencies.package2]
    path = "../my-package/"
    develop = false

    [tool.poetry.dependencies.package3]
    version = "^20.1"
    extras = [ "extra1", "extra2" ]

    [tool.poetry.dependencies.package4]
    version = "^2.2"
    markers = "python_version <= '3.4' or sys_platform == 'win32'"

    [[tool.poetry.dependencies.package5]]
    version = "<=1.9"
    python = ">=3.6,<3.8"

    [[tool.poetry.dependencies.package5]]
    version = "^2.0"
    python = ">=3.8"

[tool.poetry.group.dev.dependencies]
projen = "99.99.99"
pytest = "7.4.3"

[build-system]
requires = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"
"
`;

exports[`poetry enabled with poetry-specific options should match the snapshot 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/pyproject.toml linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
  merge_group: {}
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    steps:
      - uses: amannn/action-semantic-pull-request@v5.4.0
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/pyproject.toml
/poetry.toml
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.projenrc.py
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "dependencies": [
      {
        "name": "projen",
        "type": "devenv",
        "version": "99.99.99",
      },
      {
        "name": "package1",
        "type": "runtime",
        "version": "0.0.1",
      },
      {
        "name": "package2",
        "type": "runtime",
        "version": "0.0.2",
      },
      {
        "name": "package3",
        "type": "runtime",
      },
      {
        "name": "pytest",
        "type": "test",
        "version": "7.4.3",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "files": [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "poetry.toml",
      "pyproject.toml",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "env": {
      "PATH": "$(echo $(poetry env info -p)/bin:$PATH)",
      "VIRTUAL_ENV": "$(poetry env info -p || poetry run poetry env info -p)",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "python .projenrc.py",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install dependencies and update lockfile",
        "name": "install",
        "steps": [
          {
            "exec": "poetry update",
          },
        ],
      },
      "install:ci": {
        "description": "Install dependencies with frozen lockfile",
        "name": "install:ci",
        "steps": [
          {
            "exec": "poetry check --lock && poetry install",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
        "steps": [
          {
            "exec": "poetry build",
          },
        ],
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "publish": {
        "description": "Uploads the package to PyPI.",
        "name": "publish",
        "steps": [
          {
            "exec": "poetry publish",
          },
        ],
      },
      "publish:test": {
        "description": "Uploads the package against a test PyPI endpoint.",
        "name": "publish:test",
        "steps": [
          {
            "exec": "poetry publish -r testpypi",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
        "steps": [
          {
            "exec": "pytest",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
  "poetry.toml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

[repositories.testpypi]
url = "https://test.pypi.org/legacy/"
",
  "pyproject.toml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

[tool.poetry]
name = "test-python-project"
version = "0.1.0"
description = "a short project description"
license = "Apache-2.0"
authors = [ "First Last <email@example.com>" ]
homepage = "http://www.example.com"
classifiers = [ "Development Status :: 4 - Beta" ]
readme = "README.md"
maintainers = [ "First-2 Last-2" ]
repository = "https://github.com/test-python-project"
keywords = [ "Keyword1" ]
include = [ "CHANGELOG.md" ]
exclude = [ "my_package/excluded.py" ]
package-mode = false

  [[tool.poetry.packages]]
  include = "my_package"
  format = "sdist"

  [[tool.poetry.source]]
  name = "pypi_"
  url = "https://pypi.org/simple/"
  default = true

  [tool.poetry.scripts]
  test-python-cli = "test-python-project.cli:cli"

  [tool.poetry.extras]
  cli = [ "package1", "package2" ]

[tool.poetry.plugins."blogtool.parsers"]
".rst" = "some_module:SomeClass"

  [tool.poetry.urls]
  "bug tracker" = "https://github.com/test-python-project/issues"

  [tool.poetry.dependencies]
  package1 = "0.0.1"
  package2 = "0.0.2"
  package3 = "*"
  python = "^3.8"

[tool.poetry.group.dev.dependencies]
projen = "99.99.99"
pytest = "7.4.3"

[build-system]
requires = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"
",
  "test_python_project/__init__.py": "__version__ = "0.1.0"
",
  "test_python_project/__main__.py": "from .example import hello

if __name__ == "__main__":
    name = input("What is your name? ")
    print(hello(name))
",
  "test_python_project/example.py": "def hello(name: str) -> str:
    """A simple greeting.
    Args:
        name (str): Name to greet.
    Returns:
        str: greeting message
    """
    return f"Hello {name}!"
",
  "tests/__init__.py": "",
  "tests/test_example.py": "import pytest

from test_python_project.example import hello

@pytest.mark.parametrize(
    ("name", "expected"),
    [
        ("A. Musing", "Hello A. Musing!"),
        ("traveler", "Hello traveler!"),
        ("projen developer", "Hello projen developer!"),
    ],
)
def test_hello(name, expected):
    """Example test with parametrization."""
    assert hello(name) == expected
",
}
`;
