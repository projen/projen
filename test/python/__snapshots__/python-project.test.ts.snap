// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defaults 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/requirements-dev.txt linguist-generated
/requirements.txt linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
  merge_group: {}
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    steps:
      - uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
/.env
!/requirements.txt
!/requirements-dev.txt
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.projenrc.py
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "dependencies": [
      {
        "name": "projen",
        "type": "devenv",
        "version": "99.99.99",
      },
      {
        "name": "pytest",
        "type": "test",
        "version": "7.4.3",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "files": [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "requirements-dev.txt",
      "requirements.txt",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "env": {
      "PATH": "$(python -c "import os, sys; python_dir = 'Scripts' if sys.platform == 'win32' else 'bin'; print('{0}/.env/{1}{2}{3}'.format(os.getcwd(), python_dir, os.pathsep, os.environ['PATH']))")",
      "VIRTUAL_ENV": "$(python -c "import os; print('{0}/.env'.format(os.getcwd()))")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "python .projenrc.py",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "python -m pip install --upgrade pip",
          },
          {
            "exec": "pip install -r requirements.txt",
          },
          {
            "exec": "pip install -r requirements-dev.txt",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
        "steps": [
          {
            "exec": "pytest",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
  "requirements-dev.txt": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
projen==99.99.99
pytest==7.4.3
",
  "requirements.txt": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
",
  "test_python_project/__init__.py": "__version__ = "0.1.0"
",
  "test_python_project/__main__.py": "from .example import hello

if __name__ == "__main__":
    name = input("What is your name? ")
    print(hello(name))
",
  "test_python_project/example.py": "def hello(name: str) -> str:
    """A simple greeting.
    Args:
        name (str): Name to greet.
    Returns:
        str: greeting message
    """
    return f"Hello {name}!"
",
  "tests/__init__.py": "",
  "tests/test_example.py": "import pytest

from test_python_project.example import hello

@pytest.mark.parametrize(
    ("name", "expected"),
    [
        ("A. Musing", "Hello A. Musing!"),
        ("traveler", "Hello traveler!"),
        ("projen developer", "Hello projen developer!"),
    ],
)
def test_hello(name, expected):
    """Example test with parametrization."""
    assert hello(name) == expected
",
}
`;

exports[`dependencies 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/requirements-dev.txt linguist-generated
/requirements.txt linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
  merge_group: {}
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    steps:
      - uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
/.env
!/requirements.txt
!/requirements-dev.txt
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.projenrc.py
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "dependencies": [
      {
        "name": "hypothesis",
        "type": "devenv",
        "version": "^6.0.3",
      },
      {
        "name": "projen",
        "type": "devenv",
        "version": "99.99.99",
      },
      {
        "name": "aws-cdk.core",
        "type": "runtime",
        "version": "*",
      },
      {
        "name": "Django",
        "type": "runtime",
        "version": "3.1.5",
      },
      {
        "name": "pytest",
        "type": "test",
        "version": "7.4.3",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "files": [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "requirements-dev.txt",
      "requirements.txt",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "env": {
      "PATH": "$(python -c "import os, sys; python_dir = 'Scripts' if sys.platform == 'win32' else 'bin'; print('{0}/.env/{1}{2}{3}'.format(os.getcwd(), python_dir, os.pathsep, os.environ['PATH']))")",
      "VIRTUAL_ENV": "$(python -c "import os; print('{0}/.env'.format(os.getcwd()))")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "python .projenrc.py",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "python -m pip install --upgrade pip",
          },
          {
            "exec": "pip install -r requirements.txt",
          },
          {
            "exec": "pip install -r requirements-dev.txt",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
        "steps": [
          {
            "exec": "pytest",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
  "requirements-dev.txt": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
hypothesis>=6.0.3, <7.0.0
projen==99.99.99
pytest==7.4.3
",
  "requirements.txt": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
aws-cdk.core>=0.0.0
Django==3.1.5
",
  "test_python_project/__init__.py": "__version__ = "0.1.0"
",
  "test_python_project/__main__.py": "from .example import hello

if __name__ == "__main__":
    name = input("What is your name? ")
    print(hello(name))
",
  "test_python_project/example.py": "def hello(name: str) -> str:
    """A simple greeting.
    Args:
        name (str): Name to greet.
    Returns:
        str: greeting message
    """
    return f"Hello {name}!"
",
  "tests/__init__.py": "",
  "tests/test_example.py": "import pytest

from test_python_project.example import hello

@pytest.mark.parametrize(
    ("name", "expected"),
    [
        ("A. Musing", "Hello A. Musing!"),
        ("traveler", "Hello traveler!"),
        ("projen developer", "Hello projen developer!"),
    ],
)
def test_hello(name, expected):
    """Example test with parametrization."""
    assert hello(name) == expected
",
}
`;

exports[`dependencies via ctor 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/requirements-dev.txt linguist-generated
/requirements.txt linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
  merge_group: {}
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    steps:
      - uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
/.env
!/requirements.txt
!/requirements-dev.txt
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.projenrc.py
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "dependencies": [
      {
        "name": "hypothesis",
        "type": "devenv",
        "version": "^6.0.3",
      },
      {
        "name": "projen",
        "type": "devenv",
        "version": "99.99.99",
      },
      {
        "name": "aws-cdk.core",
        "type": "runtime",
      },
      {
        "name": "Django",
        "type": "runtime",
        "version": "3.1.5",
      },
      {
        "name": "pytest",
        "type": "test",
        "version": "7.4.3",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "files": [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "requirements-dev.txt",
      "requirements.txt",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "env": {
      "PATH": "$(python -c "import os, sys; python_dir = 'Scripts' if sys.platform == 'win32' else 'bin'; print('{0}/.env/{1}{2}{3}'.format(os.getcwd(), python_dir, os.pathsep, os.environ['PATH']))")",
      "VIRTUAL_ENV": "$(python -c "import os; print('{0}/.env'.format(os.getcwd()))")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "python .projenrc.py",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "python -m pip install --upgrade pip",
          },
          {
            "exec": "pip install -r requirements.txt",
          },
          {
            "exec": "pip install -r requirements-dev.txt",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
        "steps": [
          {
            "exec": "pytest",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
  "requirements-dev.txt": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
hypothesis>=6.0.3, <7.0.0
projen==99.99.99
pytest==7.4.3
",
  "requirements.txt": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
aws-cdk.core
Django==3.1.5
",
  "test_python_project/__init__.py": "__version__ = "0.1.0"
",
  "test_python_project/__main__.py": "from .example import hello

if __name__ == "__main__":
    name = input("What is your name? ")
    print(hello(name))
",
  "test_python_project/example.py": "def hello(name: str) -> str:
    """A simple greeting.
    Args:
        name (str): Name to greet.
    Returns:
        str: greeting message
    """
    return f"Hello {name}!"
",
  "tests/__init__.py": "",
  "tests/test_example.py": "import pytest

from test_python_project.example import hello

@pytest.mark.parametrize(
    ("name", "expected"),
    [
        ("A. Musing", "Hello A. Musing!"),
        ("traveler", "Hello traveler!"),
        ("projen developer", "Hello projen developer!"),
    ],
)
def test_hello(name, expected):
    """Example test with parametrization."""
    assert hello(name) == expected
",
}
`;

exports[`no pytest 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

* text=auto eol=lf
/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/requirements-dev.txt linguist-generated
/requirements.txt linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
  merge_group: {}
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    steps:
      - uses: amannn/action-semantic-pull-request@v6
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
/.env
!/requirements.txt
!/requirements-dev.txt
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.projenrc.py
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "dependencies": [
      {
        "name": "projen",
        "type": "devenv",
        "version": "99.99.99",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "files": [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "requirements-dev.txt",
      "requirements.txt",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "env": {
      "PATH": "$(python -c "import os, sys; python_dir = 'Scripts' if sys.platform == 'win32' else 'bin'; print('{0}/.env/{1}{2}{3}'.format(os.getcwd(), python_dir, os.pathsep, os.environ['PATH']))")",
      "VIRTUAL_ENV": "$(python -c "import os; print('{0}/.env'.format(os.getcwd()))")",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": "python .projenrc.py",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install and upgrade dependencies",
        "name": "install",
        "steps": [
          {
            "exec": "python -m pip install --upgrade pip",
          },
          {
            "exec": "pip install -r requirements.txt",
          },
          {
            "exec": "pip install -r requirements-dev.txt",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# replace this",
  "requirements-dev.txt": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
projen==99.99.99
",
  "requirements.txt": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
",
  "test_python_project/__init__.py": "__version__ = "0.1.0"
",
  "test_python_project/__main__.py": "from .example import hello

if __name__ == "__main__":
    name = input("What is your name? ")
    print(hello(name))
",
  "test_python_project/example.py": "def hello(name: str) -> str:
    """A simple greeting.
    Args:
        name (str): Name to greet.
    Returns:
        str: greeting message
    """
    return f"Hello {name}!"
",
}
`;
